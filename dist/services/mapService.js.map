{"version":3,"sources":["../../src/services/mapService.js"],"names":["mapService","width","height","tileWidth","tileHeight","canvas","map","Map","ctx","sprites","x","y","value","grid","setGrid","parts","garden","food","building","agd","floor","console","log","initGrid","getWidth","getHeight","getContext","Image","src","funkcja","drawMap","onload","sprite","redraw","drawImage"],"mappings":"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","file":"mapService.js","sourcesContent":["import Map from '../models/map.js';\r\n\r\nexport default class mapService{\r\n    constructor(width, height, tileWidth, tileHeight, canvas){\r\n        this.map = new Map(width,height,tileWidth,tileHeight);\r\n        this.canvas = canvas;\r\n        this.ctx = null;\r\n        this.sprites = null;\r\n    }\r\n\r\n    getWidth(){\r\n        return this.map.width * this.map.tileWidth;\r\n    }\r\n\r\n    getHeight(){\r\n        return this.map.height * this.map.tileHeight;\r\n    }\r\n\r\n    //update map\r\n    setGrid(x,y,value){\r\n        this.map.grid[x][y] = value;\r\n    }\r\n\r\n    //setmap\r\n    initGrid(){\r\n        for(var x=0; x < this.map.width; x++){\r\n            this.map.grid[x]= [];\r\n            for(var y=0;y < this.map.height; y++){\r\n                if(y == this.map.width - 2)\r\n                    this.setGrid(x,y,this.map.parts.garden)\r\n                else if(y == this.map.width - 1){\r\n                    if(x < 5){\r\n                        this.setGrid(x,y,this.map.parts.food)\r\n                    }\r\n                    else if(x < 10){\r\n                        this.setGrid(x,y,this.map.parts.building)\r\n                    }\r\n                    else{\r\n                        this.setGrid(x,y,this.map.parts.agd)\r\n                    }\r\n                }\r\n                else{\r\n                    this.setGrid(x,y,this.map.parts.floor)\r\n                }\r\n            }\r\n        }\r\n            return this.map.grid;\r\n    }\r\n\r\n    //init drawing\r\n    init(){\r\n        console.log(this.initGrid());\r\n        \r\n        this.canvas.width = this.getWidth();\r\n        this.canvas.height = this.getHeight();\r\n\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n        this.sprites = new Image();\r\n        this.sprites.src = './img/sprites.png';\r\n        var funkcja = this.drawMap();\r\n        this.sprites.onload = function(){\r\n            funkcja();\r\n        }; \r\n        this.drawMap();\r\n    }\r\n\r\n    drawMap(){\r\n        let sprite = null;\r\n\r\n        for(var x = 0; x < this.map.width; x++){\r\n            for(var y = 0; y < this.map.height; y++){\r\n                switch(this.map.grid[x][y]){\r\n                    case this.map.parts.food:\r\n                        sprite = this.map.parts.food;\r\n                        break;\r\n                    case this.map.parts.building:\r\n                        sprite = this.map.parts.building;\r\n                        break;\r\n                    case this.map.parts.agd:\r\n                        sprite = this.map.parts.agd;\r\n                        break;\r\n                    case this.map.parts.garden:\r\n                        sprite = this.map.parts.garden;\r\n                        break;\r\n                    default:\r\n                        sprite = this.map.parts.floor;\r\n                        break;\r\n                }\r\n\r\n                this.redraw(x,y,sprite);\r\n            }\r\n        }\r\n    }\r\n\r\n    redraw(x,y,sprite){\r\n        sprite;\r\n        this.ctx.drawImage(\r\n            this.sprites,\r\n            sprite*this.map.tileWidth, 0,\r\n            this.map.tileWidth, this.map.tileHeight,\r\n            x*this.map.tileWidth,y*this.map.tileHeight,\r\n            this.map.tileWidth, this.map.tileHeight\r\n        );\r\n    }\r\n}"]}